The algorithm which I used to generate outputs was based on the greedy approach which I incrementaly improved on
I started with a simple greedy approach.
Then I took into account the penalty and made it so that the greedy broke ties by picking the point with the lowest penalty.
Then I took it one step above! For each tower, I came up with a list of points at which the tower could be placed
while still keeping all of the cities which it is the sole provider for within its radius.
If one of these wiggle points also had a lower penalty associated with it, then the tower was moved to that location.
since this moved the towers, new opprotunities for improvemnt rose and so did the process again.

I tried varius versions of greedy algorithm and the final version did best even though it took longest.
I only used my laptop.







taking the physics approach rn.
Imagine the towers to be charged particles that are attracted to cities but repelled by other towers.
Towers that hold control of more cities are considered to be more massive.
The mass of a tower is only dependent on the number of cities for which it is the sole provider.
Once a tower becomes a provider to 0 cities, it goes away.
once a city is covered by a tower it no longer attracts other towers?
The ideas of mass may not make a lot of sense.
The forces acting on the towers should match up with the problem specification.
Towers should only feel a repulsive force when they are within the penalty radius of another tower.
Towers should only feel attraction towards uncovered towers?
Towers can have some sort of binding energy with the cities?
The binding energy is gained by joining with a city as well.
The binding energy is only for towers for which it is the sole provider.
Towers are free to move around as long as they do not leave any of their coresponding towers uncovered.
The above rule can be enforced through the binding energy.
How many towers to have?
Where should the towers be at when initialized?
How are towers created and destroyed?

Is there ever a situation where having more towers is better?


Greedy:
for each point calculate how many cities a tower could serve if placed there.
Place tower at highest place and decrement all the corresponding places.
Repeat till all cities covered.

When computing the height map for it, made the mistake of computing height map by iterating through all possible points.
Instead should have iterated through the uncovered cities and made the height map that way.

Greedy method was easy enough to get working.

Considerate Greedy:
a greedy method that takes into consideration the penalty radius
the idea is to have another map overlaid on top of the current one.
This map takes into consideration the penalty radius for the towers.
When given a choice between two places with the same citiesCovered, it will choose the location which will
lead to a decreased penalty radius

It is a good idea to keep everything in terms of points instead of tuples

What can I do to make it slightly better?
so at the end of the algorithm, towers are going to have a bit of wiggle room.
Wiggle room being locations that they can move to 
such that they still provide service to all their cities but hopefuly the cost is less.

for the wiggle room idea if a possible wiggle room increases the number of cities underControl, then it should also be taken!